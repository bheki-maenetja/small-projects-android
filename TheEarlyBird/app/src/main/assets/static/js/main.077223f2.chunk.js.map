{"version":3,"sources":["assets/registerPage.png","assets/loginPage.png","assets/newsfeedPage.png","assets/categorySearch.gif","assets/textSearch.gif","assets/exampleArticle.png","assets/viewingArticle.gif","components/Index.js","App.js","serviceWorker.js","index.js"],"names":["Projects","state","projects","spaceInvaders","name","details","images","path","registerImg","loginImg","rockPaperScissors","newsfeedImg","newsfeedGif2","newsfeedGif3","pow","exampleArticleImg","articleViewGif","currentProject","changeProject","e","target","setState","this","className","icon","faKey","size","color","onClick","faNewspaper","faBookReader","showThumbs","showStatus","infiniteLoop","autoPlay","stopOnHover","swipeable","dynamicHeight","width","map","image","style","backgroundImage","backgroundColor","opacity","React","Component","App","Index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAAe,MAA0B,yCCA1B,MAA0B,sCCA1B,MAA0B,yCCA1B,MAA0B,2CCA1B,MAA0B,uCCA1B,MAA0B,2CCA1B,MAA0B,2CCkBnCA,E,4MAEJC,MAAQ,CACNC,SAAU,CACRC,cAAe,CACbC,KAAM,uBACNC,QAAS,mPACTC,OAAQ,CACN,CACEF,KAAM,oBACNG,KAAMC,GAER,CACEJ,KAAM,aACNG,KAAME,KAIZC,kBAAmB,CACjBN,KAAM,eACNC,QAAS,sRACTC,OAAQ,CACN,CACEF,KAAM,WACNG,KAAMI,GAER,CACEP,KAAM,wBACNG,KAAMK,GAER,CACER,KAAM,oBACNG,KAAMM,KAIZC,IAAK,CACHV,KAAM,mBACNC,QAAS,kNACTC,OAAQ,CACN,CACEF,KAAM,kBACNG,KAAMQ,GAER,CACEX,KAAM,mCACNG,KAAMS,MAKdC,eAAgB,CACZb,KAAM,uBACNC,QAAS,mPACTC,OAAQ,CACN,CACEF,KAAM,oBACNG,KAAMC,GAER,CACEJ,KAAM,aACNG,KAAME,M,EAMhBS,cAAgB,SAACC,GACf,IACMF,EADe,EAAKhB,MAAlBC,SACwBiB,EAAEC,OAAOhB,MACzC,EAAKiB,SAAS,CAAEJ,oB,4CAGlB,WACE,IAAQA,EAAmBK,KAAKrB,MAAxBgB,eACR,OACE,oCACA,6BAASM,UAAU,4CACjB,4BAAQA,UAAU,aAChB,wBAAIA,UAAU,mBAAd,eAEF,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,mDACb,4BAAKN,EAAeb,MACpB,2BAAIa,EAAeZ,WAGvB,yBAAKkB,UAAU,mBACb,yBAAKA,UAAU,+CACb,yBAAKA,UAAU,0BACb,kBAAC,IAAD,CAAiBC,KAAMC,IAAOC,KAAK,KAAKC,MAAM,UAC9C,4BAAQJ,UAAU,oBAAoBnB,KAAK,gBAAgBwB,QAASN,KAAKJ,eAAzE,mBAEF,yBAAKK,UAAU,0BACb,kBAAC,IAAD,CAAiBC,KAAMK,IAAaH,KAAK,KAAKC,MAAM,UACpD,4BAAQJ,UAAU,oBAAoBnB,KAAK,oBAAoBwB,QAASN,KAAKJ,eAA7E,aAEF,yBAAKK,UAAU,0BACb,kBAAC,IAAD,CAAiBC,KAAMM,IAAcJ,KAAK,KAAKC,MAAM,UACrD,4BAAQJ,UAAU,oBAAoBnB,KAAK,MAAMwB,QAASN,KAAKJ,eAA/D,sBAGJ,yBAAKK,UAAU,kDACb,kBAAC,WAAD,CACEQ,YAAY,EACZC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,aAAa,EACbC,WAAW,EACXC,eAAe,EACfC,MAAO,QAENrB,EAAeX,OAAOiC,KAAI,SAAAC,GAAK,OAC9B,oCACA,yBAAKjB,UAAU,mBAAmBkB,MAAO,CAAEC,gBAAgB,OAAD,OAASF,EAAMjC,KAAf,OACxD,yBAAKgB,UAAU,cAAckB,MAAO,CAAEE,gBAAiB,mBAAoBC,QAAS,MAClF,2BAAIJ,EAAMpC,aAMlB,yBAAKmB,UAAU,wB,GA3HJsB,IAAMC,WAoId9C,IC7IA+C,MANf,WACE,OACE,kBAACC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.077223f2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/registerPage.e0494e29.png\";","export default __webpack_public_path__ + \"static/media/loginPage.a56af8d5.png\";","export default __webpack_public_path__ + \"static/media/newsfeedPage.bd6d1edd.png\";","export default __webpack_public_path__ + \"static/media/categorySearch.89fac673.gif\";","export default __webpack_public_path__ + \"static/media/textSearch.67c78fcf.gif\";","export default __webpack_public_path__ + \"static/media/exampleArticle.020454ff.png\";","export default __webpack_public_path__ + \"static/media/viewingArticle.6cf798c9.gif\";","import React from 'react'\n\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"\nimport { Carousel } from 'react-responsive-carousel'\nimport '../stylesheets/main.scss'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBookReader, faNewspaper, faKey } from '@fortawesome/free-solid-svg-icons'\n\nimport registerImg from '../assets/registerPage.png'\nimport loginImg from '../assets/loginPage.png'\n\nimport newsfeedImg from '../assets/newsfeedPage.png'\nimport newsfeedGif2 from '../assets/categorySearch.gif'\nimport newsfeedGif3 from '../assets/textSearch.gif'\n\nimport exampleArticleImg from '../assets/exampleArticle.png'\nimport articleViewGif from '../assets/viewingArticle.gif'\n\nclass Projects extends React.Component {\n\n  state = {\n    projects: {\n      spaceInvaders: {\n        name: 'Registration & Login',\n        details: 'To login and register all you will need is an email address and password. To register, simply enter your email address and a password that is at least 6 characters in length. Once you\\'re registered you can then log in with the same details.',\n        images: [\n          {\n            name: 'Registration Page',\n            path: registerImg\n          },\n          {\n            name: 'Login Page',\n            path: loginImg\n          },\n        ]\n      },\n      rockPaperScissors: {\n        name: 'The Newsfeed',\n        details: 'On the newsfeed page you can search for news stories by category by clicking one of the red buttons. Additionally you can search for articles by text using the search bar at the top of the page. You can then scroll through your search results to find what you\\'re looking for.',\n        images: [\n          {\n            name: 'Newsfeed',\n            path: newsfeedImg\n          },\n          {\n            name: 'Searching by category',\n            path: newsfeedGif2\n          },\n          {\n            name: 'Searching by text',\n            path: newsfeedGif3\n          }\n        ]\n      },\n      pow: {\n        name: 'Viewing Articles',\n        details: 'To view an article, simply click on its card to view its contents. Additionally, you can click on the button labelled \"Read full article\" to read the full version of the article from its orginal publication.',\n        images: [\n          {\n            name: 'Example article',\n            path: exampleArticleImg\n          },\n          {\n            name: 'Viewing an article at its source',\n            path: articleViewGif\n          },\n        ]\n      },\n    },\n    currentProject: {\n        name: 'Registration & Login',\n        details: 'To login and register all you will need is an email address and password. To register, simply enter your email address and a password that is at least 6 characters in length. Once you\\'re registered you can then log in with the same details.',\n        images: [\n          {\n            name: 'Registration Page',\n            path: registerImg\n          },\n          {\n            name: 'Login Page',\n            path: loginImg\n          },\n        ]\n      },\n  }\n\n  changeProject = (e) => {\n    const { projects } = this.state\n    const currentProject = projects[e.target.name]\n    this.setState({ currentProject })\n  }\n\n  render() {\n    const { currentProject } = this.state\n    return (\n      <>\n      <section className=\"pj-main-container animated faster zoomIn\">\n        <header className=\"pj-header\">\n          <h1 className=\"pj-main-heading\">User Guide</h1>\n        </header>\n        <div className=\"pj-project-info\">\n          <div className=\"project-details animated fadeInLeftBig delay-1s\">\n            <h2>{currentProject.name}</h2>\n            <p>{currentProject.details}</p>\n          </div>\n        </div>\n        <div className=\"pj-main-content\">\n          <div className=\"pj-side-menu animated fadeInUpBig delay-.1s\">\n            <div className=\"project-icon-container\">\n              <FontAwesomeIcon icon={faKey} size=\"2x\" color='white' />\n              <button className=\"project-icon-name\" name=\"spaceInvaders\" onClick={this.changeProject}>Authentication</button>\n            </div>\n            <div className=\"project-icon-container\">\n              <FontAwesomeIcon icon={faNewspaper} size=\"2x\" color='white' />\n              <button className=\"project-icon-name\" name=\"rockPaperScissors\" onClick={this.changeProject}>Newsfeed</button>\n            </div>\n            <div className=\"project-icon-container\">\n              <FontAwesomeIcon icon={faBookReader} size=\"2x\" color='white' />\n              <button className=\"project-icon-name\" name=\"pow\" onClick={this.changeProject}>Viewing articles</button>\n            </div>\n          </div>\n          <div className=\"pj-tv-screen animated fadeInRightBig delay-.1s\">\n            <Carousel\n              showThumbs={false} \n              showStatus={false} \n              infiniteLoop={true} \n              autoPlay={false} \n              stopOnHover={false}\n              swipeable={false}\n              dynamicHeight={true}\n              width={'100%'}\n            >\n              {currentProject.images.map(image => (\n                <>\n                <div className=\"pj-carousel-page\" style={{ backgroundImage: `url(${image.path})` }}>\n                  <div className=\"page-legend\" style={{ backgroundColor: 'rgba(0,0,0, 0.7)', opacity: '1' }}>\n                    <p>{image.name}</p>\n                  </div>\n                </div>\n                </>\n              ))}\n            </Carousel>\n            <div className=\"home-button\"></div>\n          </div>\n        </div>\n      </section>\n      </>\n    )\n  }\n}\n\nexport default Projects","import React from 'react';\nimport Index from './components/Index'\n\nfunction App() {\n  return (\n    <Index />\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}